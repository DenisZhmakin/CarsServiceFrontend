// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "CarTypeService.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message CarTypeEmptyRequest
 */
export type CarTypeEmptyRequest = object
/**
 * @generated from protobuf message CarTypeRequest
 */
export interface CarTypeRequest {
    /**
     * @generated from protobuf field: string value = 1;
     */
    value: string;
}
/**
 * @generated from protobuf message CarTypeResponse
 */
export interface CarTypeResponse {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated from protobuf message ListCarTypeResponse
 */
export interface ListCarTypeResponse {
    /**
     * @generated from protobuf field: repeated CarTypeResponse carTypes = 1;
     */
    carTypes: CarTypeResponse[];
}
// @generated message type with reflection information, may provide speed optimized methods
class CarTypeEmptyRequest$Type extends MessageType<CarTypeEmptyRequest> {
    constructor() {
        super("CarTypeEmptyRequest", []);
    }
    create(value?: PartialMessage<CarTypeEmptyRequest>): CarTypeEmptyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CarTypeEmptyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(_reader: IBinaryReader, _length: number, _options: BinaryReadOptions, target?: CarTypeEmptyRequest): CarTypeEmptyRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CarTypeEmptyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CarTypeEmptyRequest
 */
export const CarTypeEmptyRequest = new CarTypeEmptyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CarTypeRequest$Type extends MessageType<CarTypeRequest> {
    constructor() {
        super("CarTypeRequest", [
            { no: 1, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CarTypeRequest>): CarTypeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<CarTypeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CarTypeRequest): CarTypeRequest {
        // eslint-disable-next-line prefer-const
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string value */ 1:
                    message.value = reader.string();
                    break;
                default:
                    { const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d); }
            }
        }
        return message;
    }
    internalBinaryWrite(message: CarTypeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string value = 1; */
        if (message.value !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.value);
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CarTypeRequest
 */
export const CarTypeRequest = new CarTypeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CarTypeResponse$Type extends MessageType<CarTypeResponse> {
    constructor() {
        super("CarTypeResponse", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CarTypeResponse>): CarTypeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<CarTypeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CarTypeResponse): CarTypeResponse {
        // eslint-disable-next-line prefer-const
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    { const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d); }
            }
        }
        return message;
    }
    internalBinaryWrite(message: CarTypeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CarTypeResponse
 */
export const CarTypeResponse = new CarTypeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCarTypeResponse$Type extends MessageType<ListCarTypeResponse> {
    constructor() {
        super("ListCarTypeResponse", [
            { no: 1, name: "carTypes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CarTypeResponse }
        ]);
    }
    create(value?: PartialMessage<ListCarTypeResponse>): ListCarTypeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.carTypes = [];
        if (value !== undefined)
            reflectionMergePartial<ListCarTypeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCarTypeResponse): ListCarTypeResponse {
        // eslint-disable-next-line prefer-const
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CarTypeResponse carTypes */ 1:
                    message.carTypes.push(CarTypeResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    { const u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    const d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d); }
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCarTypeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CarTypeResponse carTypes = 1; */
        for (let i = 0; i < message.carTypes.length; i++)
            CarTypeResponse.internalBinaryWrite(message.carTypes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        const u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListCarTypeResponse
 */
export const ListCarTypeResponse = new ListCarTypeResponse$Type();
/**
 * @generated ServiceType for protobuf service CarTypeService
 */
export const CarTypeService = new ServiceType("CarTypeService", [
    { name: "AddNewCarType", options: {}, I: CarTypeRequest, O: CarTypeResponse },
    { name: "GetAllCarTypes", options: {}, I: CarTypeEmptyRequest, O: ListCarTypeResponse }
]);
