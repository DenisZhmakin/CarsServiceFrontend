// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "CarService.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CarService } from "./CarService";
import type { ListCarResponse } from "./CarService";
import type { CarRequestEmptyRequest } from "./CarService";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CarResponse } from "./CarService";
import type { CarRequest } from "./CarService";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service CarService
 */
export interface ICarServiceClient {
    /**
     * @generated from protobuf rpc: AddNewCar(CarRequest) returns (CarResponse);
     */
    addNewCar(input: CarRequest, options?: RpcOptions): UnaryCall<CarRequest, CarResponse>;
    /**
     * @generated from protobuf rpc: GetAllCars(CarRequestEmptyRequest) returns (ListCarResponse);
     */
    getAllCars(input: CarRequestEmptyRequest, options?: RpcOptions): UnaryCall<CarRequestEmptyRequest, ListCarResponse>;
}
/**
 * @generated from protobuf service CarService
 */
export class CarServiceClient implements ICarServiceClient, ServiceInfo {
    typeName = CarService.typeName;
    methods = CarService.methods;
    options = CarService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: AddNewCar(CarRequest) returns (CarResponse);
     */
    addNewCar(input: CarRequest, options?: RpcOptions): UnaryCall<CarRequest, CarResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CarRequest, CarResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllCars(CarRequestEmptyRequest) returns (ListCarResponse);
     */
    getAllCars(input: CarRequestEmptyRequest, options?: RpcOptions): UnaryCall<CarRequestEmptyRequest, ListCarResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CarRequestEmptyRequest, ListCarResponse>("unary", this._transport, method, opt, input);
    }
}
