// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "CarStatusTypeService.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message CarStatusTypeEmptyRequest
 */
export type CarStatusTypeEmptyRequest = object
/**
 * @generated from protobuf message CarStatusTypeRequest
 */
export interface CarStatusTypeRequest {
    /**
     * @generated from protobuf field: string value = 1;
     */
    value: string;
}
/**
 * @generated from protobuf message CarStatusTypeResponse
 */
export interface CarStatusTypeResponse {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated from protobuf message ListCarStatusTypeResponse
 */
export interface ListCarStatusTypeResponse {
    /**
     * @generated from protobuf field: repeated CarStatusTypeResponse carStatusTypes = 1;
     */
    carStatusTypes: CarStatusTypeResponse[];
}
// @generated message type with reflection information, may provide speed optimized methods
class CarStatusTypeEmptyRequest$Type extends MessageType<CarStatusTypeEmptyRequest> {
    constructor() {
        super("CarStatusTypeEmptyRequest", []);
    }
    create(value?: PartialMessage<CarStatusTypeEmptyRequest>): CarStatusTypeEmptyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CarStatusTypeEmptyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(_reader: IBinaryReader, _length: number, _options: BinaryReadOptions, target?: CarStatusTypeEmptyRequest): CarStatusTypeEmptyRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CarStatusTypeEmptyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CarStatusTypeEmptyRequest
 */
export const CarStatusTypeEmptyRequest = new CarStatusTypeEmptyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CarStatusTypeRequest$Type extends MessageType<CarStatusTypeRequest> {
    constructor() {
        super("CarStatusTypeRequest", [
            { no: 1, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CarStatusTypeRequest>): CarStatusTypeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<CarStatusTypeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CarStatusTypeRequest): CarStatusTypeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string value */ 1:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CarStatusTypeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string value = 1; */
        if (message.value !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CarStatusTypeRequest
 */
export const CarStatusTypeRequest = new CarStatusTypeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CarStatusTypeResponse$Type extends MessageType<CarStatusTypeResponse> {
    constructor() {
        super("CarStatusTypeResponse", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CarStatusTypeResponse>): CarStatusTypeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<CarStatusTypeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CarStatusTypeResponse): CarStatusTypeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CarStatusTypeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CarStatusTypeResponse
 */
export const CarStatusTypeResponse = new CarStatusTypeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCarStatusTypeResponse$Type extends MessageType<ListCarStatusTypeResponse> {
    constructor() {
        super("ListCarStatusTypeResponse", [
            { no: 1, name: "carStatusTypes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CarStatusTypeResponse }
        ]);
    }
    create(value?: PartialMessage<ListCarStatusTypeResponse>): ListCarStatusTypeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.carStatusTypes = [];
        if (value !== undefined)
            reflectionMergePartial<ListCarStatusTypeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCarStatusTypeResponse): ListCarStatusTypeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CarStatusTypeResponse carStatusTypes */ 1:
                    message.carStatusTypes.push(CarStatusTypeResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCarStatusTypeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CarStatusTypeResponse carStatusTypes = 1; */
        for (let i = 0; i < message.carStatusTypes.length; i++)
            CarStatusTypeResponse.internalBinaryWrite(message.carStatusTypes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListCarStatusTypeResponse
 */
export const ListCarStatusTypeResponse = new ListCarStatusTypeResponse$Type();
/**
 * @generated ServiceType for protobuf service CarStatusTypeService
 */
export const CarStatusTypeService = new ServiceType("CarStatusTypeService", [
    { name: "AddNewCarStatusType", options: {}, I: CarStatusTypeRequest, O: CarStatusTypeResponse },
    { name: "GetAllCarStatusTypes", options: {}, I: CarStatusTypeEmptyRequest, O: ListCarStatusTypeResponse }
]);
