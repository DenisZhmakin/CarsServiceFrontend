// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "CarService.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message CarRequestEmptyRequest
 */
export type CarRequestEmptyRequest = object
/**
 * @generated from protobuf message CarRequest
 */
export interface CarRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 carTypeId = 2;
     */
    carTypeId: bigint;
}
/**
 * @generated from protobuf message CarResponse
 */
export interface CarResponse {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: int64 carTypeId = 3;
     */
    carTypeId: bigint;
    /**
     * @generated from protobuf field: string carTypeValue = 4;
     */
    carTypeValue: string;
}
/**
 * @generated from protobuf message ListCarResponse
 */
export interface ListCarResponse {
    /**
     * @generated from protobuf field: repeated CarResponse cars = 1;
     */
    cars: CarResponse[];
}
// @generated message type with reflection information, may provide speed optimized methods
class CarRequestEmptyRequest$Type extends MessageType<CarRequestEmptyRequest> {
    constructor() {
        super("CarRequestEmptyRequest", []);
    }
    create(value?: PartialMessage<CarRequestEmptyRequest>): CarRequestEmptyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CarRequestEmptyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(_reader: IBinaryReader, _length: number, _options: BinaryReadOptions, target?: CarRequestEmptyRequest): CarRequestEmptyRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CarRequestEmptyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CarRequestEmptyRequest
 */
export const CarRequestEmptyRequest = new CarRequestEmptyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CarRequest$Type extends MessageType<CarRequest> {
    constructor() {
        super("CarRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "carTypeId", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CarRequest>): CarRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.carTypeId = 0n;
        if (value !== undefined)
            reflectionMergePartial<CarRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CarRequest): CarRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int64 carTypeId */ 2:
                    message.carTypeId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CarRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int64 carTypeId = 2; */
        if (message.carTypeId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.carTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CarRequest
 */
export const CarRequest = new CarRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CarResponse$Type extends MessageType<CarResponse> {
    constructor() {
        super("CarResponse", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "carTypeId", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "carTypeValue", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CarResponse>): CarResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.name = "";
        message.carTypeId = 0n;
        message.carTypeValue = "";
        if (value !== undefined)
            reflectionMergePartial<CarResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CarResponse): CarResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int64 carTypeId */ 3:
                    message.carTypeId = reader.int64().toBigInt();
                    break;
                case /* string carTypeValue */ 4:
                    message.carTypeValue = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CarResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int64 carTypeId = 3; */
        if (message.carTypeId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.carTypeId);
        /* string carTypeValue = 4; */
        if (message.carTypeValue !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.carTypeValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CarResponse
 */
export const CarResponse = new CarResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCarResponse$Type extends MessageType<ListCarResponse> {
    constructor() {
        super("ListCarResponse", [
            { no: 1, name: "cars", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CarResponse }
        ]);
    }
    create(value?: PartialMessage<ListCarResponse>): ListCarResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cars = [];
        if (value !== undefined)
            reflectionMergePartial<ListCarResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCarResponse): ListCarResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CarResponse cars */ 1:
                    message.cars.push(CarResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCarResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CarResponse cars = 1; */
        for (let i = 0; i < message.cars.length; i++)
            CarResponse.internalBinaryWrite(message.cars[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListCarResponse
 */
export const ListCarResponse = new ListCarResponse$Type();
/**
 * @generated ServiceType for protobuf service CarService
 */
export const CarService = new ServiceType("CarService", [
    { name: "AddNewCar", options: {}, I: CarRequest, O: CarResponse },
    { name: "GetAllCars", options: {}, I: CarRequestEmptyRequest, O: ListCarResponse }
]);
