// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "CarStatusEventsService.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message CarStatusEventsRequest
 */
export interface CarStatusEventsRequest {
    /**
     * @generated from protobuf field: int64 carId = 2;
     */
    carId: bigint;
    /**
     * @generated from protobuf field: int64 statusTypeId = 3;
     */
    statusTypeId: bigint;
}
/**
 * @generated from protobuf message CarStatusEventsResponse
 */
export interface CarStatusEventsResponse {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 index = 2;
     */
    index: bigint;
    /**
     * @generated from protobuf field: int64 carId = 3;
     */
    carId: bigint;
    /**
     * @generated from protobuf field: string carName = 4;
     */
    carName: string;
    /**
     * @generated from protobuf field: int64 statusTypeId = 5;
     */
    statusTypeId: bigint;
    /**
     * @generated from protobuf field: string statusValue = 6;
     */
    statusValue: string;
    /**
     * @generated from protobuf field: string timeOfRegistration = 7;
     */
    timeOfRegistration: string;
    /**
     * @generated from protobuf field: int64 activeStatusSeconds = 8;
     */
    activeStatusSeconds: bigint;
}
/**
 * @generated from protobuf message CarStatusEventsCarIdRequest
 */
export interface CarStatusEventsCarIdRequest {
    /**
     * @generated from protobuf field: int64 carId = 1;
     */
    carId: bigint;
}
/**
 * @generated from protobuf message ListCarStatusEventsResponse
 */
export interface ListCarStatusEventsResponse {
    /**
     * @generated from protobuf field: repeated CarStatusEventsResponse statuses = 1;
     */
    statuses: CarStatusEventsResponse[];
}
// @generated message type with reflection information, may provide speed optimized methods
class CarStatusEventsRequest$Type extends MessageType<CarStatusEventsRequest> {
    constructor() {
        super("CarStatusEventsRequest", [
            { no: 2, name: "carId", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "statusTypeId", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CarStatusEventsRequest>): CarStatusEventsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.carId = 0n;
        message.statusTypeId = 0n;
        if (value !== undefined)
            reflectionMergePartial<CarStatusEventsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CarStatusEventsRequest): CarStatusEventsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 carId */ 2:
                    message.carId = reader.int64().toBigInt();
                    break;
                case /* int64 statusTypeId */ 3:
                    message.statusTypeId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CarStatusEventsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 carId = 2; */
        if (message.carId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.carId);
        /* int64 statusTypeId = 3; */
        if (message.statusTypeId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.statusTypeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CarStatusEventsRequest
 */
export const CarStatusEventsRequest = new CarStatusEventsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CarStatusEventsResponse$Type extends MessageType<CarStatusEventsResponse> {
    constructor() {
        super("CarStatusEventsResponse", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "index", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "carId", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "carName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "statusTypeId", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "statusValue", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "timeOfRegistration", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "activeStatusSeconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CarStatusEventsResponse>): CarStatusEventsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.index = 0n;
        message.carId = 0n;
        message.carName = "";
        message.statusTypeId = 0n;
        message.statusValue = "";
        message.timeOfRegistration = "";
        message.activeStatusSeconds = 0n;
        if (value !== undefined)
            reflectionMergePartial<CarStatusEventsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CarStatusEventsResponse): CarStatusEventsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 index */ 2:
                    message.index = reader.int64().toBigInt();
                    break;
                case /* int64 carId */ 3:
                    message.carId = reader.int64().toBigInt();
                    break;
                case /* string carName */ 4:
                    message.carName = reader.string();
                    break;
                case /* int64 statusTypeId */ 5:
                    message.statusTypeId = reader.int64().toBigInt();
                    break;
                case /* string statusValue */ 6:
                    message.statusValue = reader.string();
                    break;
                case /* string timeOfRegistration */ 7:
                    message.timeOfRegistration = reader.string();
                    break;
                case /* int64 activeStatusSeconds */ 8:
                    message.activeStatusSeconds = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CarStatusEventsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 index = 2; */
        if (message.index !== 0n)
            writer.tag(2, WireType.Varint).int64(message.index);
        /* int64 carId = 3; */
        if (message.carId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.carId);
        /* string carName = 4; */
        if (message.carName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.carName);
        /* int64 statusTypeId = 5; */
        if (message.statusTypeId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.statusTypeId);
        /* string statusValue = 6; */
        if (message.statusValue !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.statusValue);
        /* string timeOfRegistration = 7; */
        if (message.timeOfRegistration !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.timeOfRegistration);
        /* int64 activeStatusSeconds = 8; */
        if (message.activeStatusSeconds !== 0n)
            writer.tag(8, WireType.Varint).int64(message.activeStatusSeconds);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CarStatusEventsResponse
 */
export const CarStatusEventsResponse = new CarStatusEventsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CarStatusEventsCarIdRequest$Type extends MessageType<CarStatusEventsCarIdRequest> {
    constructor() {
        super("CarStatusEventsCarIdRequest", [
            { no: 1, name: "carId", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CarStatusEventsCarIdRequest>): CarStatusEventsCarIdRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.carId = 0n;
        if (value !== undefined)
            reflectionMergePartial<CarStatusEventsCarIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CarStatusEventsCarIdRequest): CarStatusEventsCarIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 carId */ 1:
                    message.carId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CarStatusEventsCarIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 carId = 1; */
        if (message.carId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.carId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CarStatusEventsCarIdRequest
 */
export const CarStatusEventsCarIdRequest = new CarStatusEventsCarIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCarStatusEventsResponse$Type extends MessageType<ListCarStatusEventsResponse> {
    constructor() {
        super("ListCarStatusEventsResponse", [
            { no: 1, name: "statuses", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CarStatusEventsResponse }
        ]);
    }
    create(value?: PartialMessage<ListCarStatusEventsResponse>): ListCarStatusEventsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statuses = [];
        if (value !== undefined)
            reflectionMergePartial<ListCarStatusEventsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCarStatusEventsResponse): ListCarStatusEventsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated CarStatusEventsResponse statuses */ 1:
                    message.statuses.push(CarStatusEventsResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCarStatusEventsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated CarStatusEventsResponse statuses = 1; */
        for (let i = 0; i < message.statuses.length; i++)
            CarStatusEventsResponse.internalBinaryWrite(message.statuses[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListCarStatusEventsResponse
 */
export const ListCarStatusEventsResponse = new ListCarStatusEventsResponse$Type();
/**
 * @generated ServiceType for protobuf service CarStatusEventsService
 */
export const CarStatusEventsService = new ServiceType("CarStatusEventsService", [
    { name: "AddNewCarStatusEvents", options: {}, I: CarStatusEventsRequest, O: CarStatusEventsResponse },
    { name: "GetAllCarStatusEventsByCarID", options: {}, I: CarStatusEventsCarIdRequest, O: ListCarStatusEventsResponse }
]);
